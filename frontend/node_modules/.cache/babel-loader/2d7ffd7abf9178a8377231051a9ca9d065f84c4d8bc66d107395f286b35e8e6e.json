{"ast":null,"code":"import config from '../config/frontend_config.json';\nconst BASE_URL = config.api.base_url;\n\n/**\r\n * Fetches the list of available Bible translations.\r\n * @returns {Promise} A promise resolving to the list of Bibles.\r\n */\nexport async function listBibles() {\n  const response = await fetch(`${BASE_URL}${config.api.endpoints.list_bibles}`);\n  if (!response.ok) {\n    throw new Error(`Failed to fetch bibles: ${response.statusText}`);\n  }\n  return response.json();\n}\n\n/**\r\n * Fetches the content of a specific Bible translation.\r\n * @param {string} version - The version ID of the Bible to fetch.\r\n * @returns {Promise} A promise resolving to the Bible content.\r\n */\nexport async function getBible(version) {\n  const endpoint = config.api.endpoints.get_bible.replace('{version}', version);\n  const response = await fetch(`${BASE_URL}${endpoint}`);\n  if (!response.ok) {\n    throw new Error(`Failed to fetch Bible version '${version}': ${response.statusText}`);\n  }\n  return response.json();\n}","map":{"version":3,"names":["config","BASE_URL","api","base_url","listBibles","response","fetch","endpoints","list_bibles","ok","Error","statusText","json","getBible","version","endpoint","get_bible","replace"],"sources":["C:/bible/frontend/src/api.js"],"sourcesContent":["import config from '../config/frontend_config.json';\r\n\r\nconst BASE_URL = config.api.base_url;\r\n\r\n/**\r\n * Fetches the list of available Bible translations.\r\n * @returns {Promise} A promise resolving to the list of Bibles.\r\n */\r\nexport async function listBibles() {\r\n    const response = await fetch(`${BASE_URL}${config.api.endpoints.list_bibles}`);\r\n    if (!response.ok) {\r\n        throw new Error(`Failed to fetch bibles: ${response.statusText}`);\r\n    }\r\n    return response.json();\r\n}\r\n\r\n/**\r\n * Fetches the content of a specific Bible translation.\r\n * @param {string} version - The version ID of the Bible to fetch.\r\n * @returns {Promise} A promise resolving to the Bible content.\r\n */\r\nexport async function getBible(version) {\r\n    const endpoint = config.api.endpoints.get_bible.replace('{version}', version);\r\n    const response = await fetch(`${BASE_URL}${endpoint}`);\r\n    if (!response.ok) {\r\n        throw new Error(`Failed to fetch Bible version '${version}': ${response.statusText}`);\r\n    }\r\n    return response.json();\r\n}"],"mappings":"AAAA,OAAOA,MAAM,MAAM,gCAAgC;AAEnD,MAAMC,QAAQ,GAAGD,MAAM,CAACE,GAAG,CAACC,QAAQ;;AAEpC;AACA;AACA;AACA;AACA,OAAO,eAAeC,UAAUA,CAAA,EAAG;EAC/B,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGL,QAAQ,GAAGD,MAAM,CAACE,GAAG,CAACK,SAAS,CAACC,WAAW,EAAE,CAAC;EAC9E,IAAI,CAACH,QAAQ,CAACI,EAAE,EAAE;IACd,MAAM,IAAIC,KAAK,CAAC,2BAA2BL,QAAQ,CAACM,UAAU,EAAE,CAAC;EACrE;EACA,OAAON,QAAQ,CAACO,IAAI,CAAC,CAAC;AAC1B;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO,eAAeC,QAAQA,CAACC,OAAO,EAAE;EACpC,MAAMC,QAAQ,GAAGf,MAAM,CAACE,GAAG,CAACK,SAAS,CAACS,SAAS,CAACC,OAAO,CAAC,WAAW,EAAEH,OAAO,CAAC;EAC7E,MAAMT,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGL,QAAQ,GAAGc,QAAQ,EAAE,CAAC;EACtD,IAAI,CAACV,QAAQ,CAACI,EAAE,EAAE;IACd,MAAM,IAAIC,KAAK,CAAC,kCAAkCI,OAAO,MAAMT,QAAQ,CAACM,UAAU,EAAE,CAAC;EACzF;EACA,OAAON,QAAQ,CAACO,IAAI,CAAC,CAAC;AAC1B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}